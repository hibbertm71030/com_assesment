

# imports

import math



# shape checker
def shape_checker(question):
    valid = False
    while not valid:

        response = input(question).lower()
        # checks if response is in list of shapes
        if response in list_of_shapes:
            return response
        # checks if input is the first letter of one of the shape
        else:
            for item in list_of_shapes:
                if response == item[0]:
                    return item

        print("please use one of the following: rectangle, square, circle, parallelogram ")



# number only function
def number_only(question):
    error = "please use a number"

    valid = False
    while not valid:
        response = input(question)

        for letter in response:
        # checks if input is a number, returns response
            if letter.isdigit():
                return response
            # if inputs not a number prints error
            elif not letter.isdigit():
                print(error)
                break



# end code function

def end_code(question):

    valid = False
    while not valid:
        error = "please enter yes or no"
        response = input(question)
        acceptable_answers = ["yes", "no", "y", "n"]

        # if response is yes, adds calculation to calculation_list (the history list)
        if response.lower() == "yes"[0] or response.lower() == "yes":
            calculation_list.append(calculation)
            print()
            return response

        # if response is no, adds calculation to calculation list
        # and prints calculation list with each calculation spereated by a blank line
        elif response.lower() == "no"[0] or response.lower() == "no":
            calculation_list.append(calculation)
            print("")
            print("")
            print("CALCULATION HISTORY:")
            print("")
            for thiscalc in calculation_list:
                print(thiscalc, sep='\n')

            break

        # if response not yes or no prints error
        elif response not in acceptable_answers:
            print(error)
            continue





# area or perimeter checker
def area_or_perimeter(question):
    valid = False
    acceptable_answers = ["area", "perimeter", "both"]
    while not valid:

        response = input(question).lower()
        # if response in list return response
        if response in acceptable_answers:
            return response

        else:
            for item in acceptable_answers:
                # checks if response is the first letter of area, perimeter, or both
                if response == item[0]:
                    # returns response (returns whole item not just letter)
                    return item

        print("Please enter either area or perimeter.")


# not blank function
def not_blank(question):
    valid = False
    while not valid:
        response = input(question)
        error = "please enter a unit"

        if response == "":
            print(error)
        elif response != "":
            return response








# list of shapes

list_of_shapes = ["rectangle", "square", "circle", "parallelogram"]

# calculation lists
calculation_list = []
calculation = []


# main routine

cont = "yes" or "y"
# Loops program
while cont == "yes" or cont == "y":
    # Resets the calculation variable
    calculation = []


    # ask user for shape
    shape = shape_checker("What shape do you want to calculate for? ")
    units = not_blank("what are the units? ")

    # calculates area and perimeter for rectangle and adds answer to list
    if shape == "rectangle":

        # asks for base and height
        base = number_only("what is the base? ")
        height = number_only("what is the height? ")


        # calculate area and perimeter through number only function
        area = "area = {:.2f} {}^2".format(float(base) * float(height), units)
        perimeter = "perimeter = {:.2f} {}".format(float(base) + float(base) + float(height) + float(height), units)

        # add to calculation list and prints shape: area perimeter
        answer = area, perimeter
        neat_ans = "{}:  {} {}".format(shape, area, perimeter)
        calculation.append(neat_ans)
        print(neat_ans)
        print()


    # calculates area and perimeter for square and adds answer to list
    elif shape == "square":

        # asks for length of a side through number only function
        length = number_only("what is the length of the a side? ")

        # calculates area and perimeter
        area = "area = {:.2f} {}^2 ".format(float(length) * float(length), units)
        perimeter = "perimeter = {:.2f} {}".format(float(length) * 4, units)

        # adds answer to calculation list
        answer = area, perimeter
        neat_ans = "{}:  {} {}".format(shape, area, perimeter)
        calculation.append(neat_ans)
        print(neat_ans)
        print()

    # calculates area and perimeter for circle and adds answer to list
    elif shape == "circle":

        # asks for radius through number only function
        radius = number_only("what is the radius? ")

        # calculates area and perimeter
        area = "area = {:.2f} {}^2".format(float(radius) * float(radius) * (math.pi), units)
        perimeter = "perimeter = {:.2f} {}".format(float(radius) * 2 * (math.pi), units)

        # adds answer to calculation list
        answer = area, perimeter
        neat_ans = "{}:  {} {}".format(shape, area, perimeter)
        calculation.append(neat_ans)
        print(neat_ans)
        print()


    # calculates area, perimeter or both for parallelogram and adds answer to list
    elif shape == "parallelogram".lower():

        # asks if user wants to calculate area, perimeter, or both
        ans = area_or_perimeter("Do you want to calculate for area or perimeter or both? ")

        # if answer = area ask for base and height
        if ans == "area":
            base = number_only("what is the base? ")
            height = number_only("what is the height? ")

            # calculates area and adds it to calculation list
            area = "area = {:.2f} {}^2".format(float(height) * float(base), units)
            neat_ans = "{}:  {}".format(shape, area,)
            calculation.append(neat_ans)
            print(neat_ans)
            print()

        # if answer = perimeter ask for base and side length
        elif ans == "perimeter".lower():
            base = number_only("what is the base? ")
            side = number_only("what is the side length? ")

            # calculates perimeter and adds it to calculation list
            perimeter = "perimeter = {:.2f} {}".format(float(base) + float(base) + float(side) + float(side), units)
            neat_ans = "{}:  {}".format(shape, perimeter)
            calculation.append(neat_ans)
            print(neat_ans)
            print()

        # if answer = both ask for base, height, and side length
        elif ans == "both".lower():
            base = number_only("what is the base? ")
            side = number_only("what is the side length? ")
            height = number_only("what is the height? ")

            # calculates area and perimeter and adds it to calculation list
            area = "area = {:.2f} {}^2".format(float(height) * float(base), units)
            perimeter = "perimeter = {:.2f} {}^2".format(float(base) + float(base) + float(side) + float(side), units)
            answer = area, perimeter
            neat_ans = "{}:  {} {}".format(shape, area, perimeter)
            calculation.append(neat_ans)
            print(neat_ans)
            print()

    # asks if they want to calculate for another shape through end code function, which will loop program
    cont = end_code("Would you like to calculate for another shape? (type yes or no) ")




